x-aliases:
  meta:
    common: &meta-common
      mtls: true
      api_spec: Mojaloop v1.0
    mowali-dfsp2: &mowali-dfsp2-meta
      <<: *meta-common
      source: mowali
      target: dfsp2
    mowali-dfsp1: &mowali-dfsp1-meta
      <<: *meta-common
      source: mowali
      target: dfsp1
    dfsp2-mowali: &dfsp2-mowali-meta
      <<: *meta-common
      source: dfsp2
      target: mowali
    dfsp1-mowali: &dfsp1-mowali-meta
      <<: *meta-common
      source: dfsp1
      target: mowali
  common-scripts:
    auth-header: &test-auth-header
      name: Authorization header must be provided
      rules:
        headers.authorization: 'required'
    fspiop-headers: &test-fspiop-headers
      name: FSPIOP Source and Destination headers must be provided
      rules:
        headers.fspiop-source.0: 'required'
        headers.fspiop-destination.0: 'required'
    response-200: &response-200-status
      test_response_scripts:
        - name: Transaction was successfully Accepted
          rules:
            status: 'required|in:200'
      response:
        headers:
          date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
          content-type: 'application/json'
        status: 200
    response-202: &response-202-status
      test_response_scripts:
        - name: Transaction was successfully Accepted
          rules:
            status: 'required|in:202'
      response:
        headers:
          date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
          content-type: 'application/json'
        status: 202

  jws:
    dfsp1: &dfsp1-jws
      jws:
        alg: RS256
        key: '{{ file_env.DFSP1_JWS_PRIVATE_KEY }}'
        public_key: '{{ file_env.DFSP1_JWS_PUBLIC_KEY }}'
        header: 'fspiop-signature'
        transform: mojaloop
        protectedHeaders:
          - FSPIOP-URI
          - FSPIOP-HTTP-Method
          - FSPIOP-Source
          - FSPIOP-Destination
          - Date
    dfsp2: &dfsp2-jws
      jws:
        alg: RS256
        key: '{{ file_env.DFSP2_JWS_PRIVATE_KEY }}'
        public_key: '{{ file_env.DFSP2_JWS_PUBLIC_KEY }}'
        header: 'fspiop-signature'
        transform: mojaloop
        protectedHeaders:
          - FSPIOP-URI
          - FSPIOP-HTTP-Method
          - FSPIOP-Source
          - FSPIOP-Destination
          - Date

  common-headers:
    response: &response-headers
      headers:
        date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
        content-type: 'application/json'
    transfer: &header-post-transfers
      accept: 'application/vnd.interoperability.transfers+json;version=1.0'
      content-type: 'application/vnd.interoperability.transfers+json;version=1.0'
    quotes: &header-post-quotes
      accept: 'application/vnd.interoperability.quotes+json;version=1.0'
      content-type: 'application/vnd.interoperability.quotes+json;version=1.0'
    parties: &header-get-parties
      accept: 'application/vnd.interoperability.parties+json;version=1.0'
      content-type: 'application/vnd.interoperability.parties+json;version=1.0'
    transfer-put: &header-put-transfers
      content-type: 'application/vnd.interoperability.transfers+json;version=1.0'
    quotes-put: &header-put-quotes
      content-type: 'application/vnd.interoperability.quotes+json;version=1.0'
    parties-put: &header-put-parties
      content-type: 'application/vnd.interoperability.parties+json;version=1.0'
    dfsp1: &header-dfsp1
      date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
      authorization: Bearer {{env.DFSP1_OAUTH_TOKEN}}
      fspiop-source: '{{env.DFSP1_FSPIOP | default("DFSP1")}}'
      fspiop-destination: '{{env.DFSP2_FSPIOP | default("DFSP2")}}'
    dfsp2: &header-dfsp2
      date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
      authorization: Bearer {{env.DFSP2_OAUTH_TOKEN}}
      fspiop-source: '{{env.DFSP2_FSPIOP | default("DFSP2")}}'
      fspiop-destination: '{{env.DFSP1_FSPIOP | default("DFSP1")}}'

  util:
    fwd-message: &fwded-msg # TODO: can we get method and URI in here?
      headers:
        fspiop-uri:
          '{{ steps[current_step-1].request.headers["fspiop-uri"].0 }}'
        fspiop-http-method:
          '{{ steps[current_step-1].request.headers["fspiop-http-method"].0 }}'
        fspiop-source:
          '{{ steps[current_step-1].request.headers["fspiop-source"].0 }}'
        fspiop-destination:
          '{{ steps[current_step-1].request.headers["fspiop-destination"].0 }}'
        fspiop-signature:
          '{{ steps[current_step-1].request.headers["fspiop-signature"].0 }}'
        content-type:
          '{{ steps[current_step-1].request.headers["content-type"].0 }}'
        accept: '{{ steps[current_step-1].request.headers["accept"].0 }}'
        date: '{{ steps[current_step-1].request.headers["date"].0 }}'
      body: '{{steps[current_step-1].request.body | json_encode}}'

name: FSPIOP Source Mismatch (DFSP1 Sender)
slug: mowali-p2p-fspiop-source-mismatch-dfsp1
use_case: P2P
behavior: negative
description: |
  This testcase simulates a scenario where a party at DFSP1 would like to
  send money to a party at DFSP2. This flow shows the steps involved when
  the party at DFSP1 **initiates** the transaction, but the payer fsp ID is different from the fspiop-source header.
precondition: |
  - DFSP1 and DFSP2 exist Mowali Hub as Participants.
  - The following values are set in the session environment:
    - `DFSP1_FSPIOP`
    - `DFSP1_PARTY_MSISDN`
    - `DFSP2_FSPIOP` 
    - `DFSP2_PARTY_MSISDN` 
    - `DFSP1_OAUTH_TOKEN` (if DFSP1 is simulated)
    - `DFSP2_OAUTH_TOKEN` (if DFSP2 is simulated)
components:
  - name: DFSP 1
    slug: dfsp1
  - name: Mowali Hub
    slug: mowali
  - name: DFSP 2
    slug: dfsp2
test_steps:
  ## 1 ------------------------------GET /parties: MMO1 -> Mojaloop ------------------------------##
  - path: /parties/{Type}/{ID}
    pattern: "parties/MSISDN/[^\/]+$"
    method: GET
    <<: *dfsp1-mowali-meta
    test_request_scripts:
      - <<: *test-auth-header
    request:
      method: GET
      uri: parties/MSISDN/{{ env.DFSP2_PARTY_MSISDN }}
      headers:
        <<: *header-get-parties
        date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
        authorization: Bearer {{env.DFSP1_OAUTH_TOKEN}}
        fspiop-source: '{{env.DFSP1_FSPIOP | default("DFSP1")}}'
        fspiop-uri: /parties/MSISDN/{{ env.DFSP2_PARTY_MSISDN }}
        fspiop-http-method: GET
    <<: *response-202-status

  ## 2 ------------------------------GET /parties: Mojaloop -> MMO2 ------------------------------##
  - path: /parties/{Type}/{ID}
    pattern: "parties/MSISDN/[^\/]+$"
    method: GET
    <<: *mowali-dfsp2-meta
    request:
      method: GET
      uri: parties/MSISDN/{{ env.DFSP2_PARTY_MSISDN }}
      <<: *fwded-msg
    <<: *response-202-status
    response:
      <<: *response-headers
      status: 202

  ## 3 ------------------------------PUT/Parties: Mojaloop <- MMO2 ------------------------------##
  - path: /parties/{Type}/{ID}
    pattern: "^parties/MSISDN/[^\/]+(/error)?$"
    method: PUT
    <<: *dfsp2-mowali-meta
    test_request_scripts:
      - <<: *test-auth-header
      - <<: *test-fspiop-headers
      - &put-parties-test-party
        name: Correct party must be returned
        rules:
          body.party.partyIdInfo.partyIdentifier:
            'required|in:{{ env.DFSP2_PARTY_MSISDN }}'
    request:
      method: PUT
      uri: parties/MSISDN/{{ env.DFSP2_PARTY_MSISDN }}
      headers:
        <<: *header-dfsp2
        <<: *header-put-parties
        fspiop-uri: /parties/MSISDN/{{ env.DFSP2_PARTY_MSISDN }}
        fspiop-http-method: PUT
        content-type: 'application/vnd.interoperability.parties+json;version=1.0'
      body:
        party:
          name: 'TestFirst TestLast'
          partyIdInfo:
            fspId: '{{env.DFSP2_FSPIOP | default("DFSP2")}}'
            partyIdType: 'MSISDN'
            partyIdentifier: '{{ env.DFSP2_PARTY_MSISDN }}'
          personalInfo:
            complexName:
              lastName: 'TestLast'
              firstName: 'TestFirst'
              middleName: 'TestMiddle'
            dateOfBirth: '2010-10-10'
    <<: *response-200-status

  ## 4 ------------------------------PUT/Parties: MMO1 <- Mojaloop ------------------------------##
  - path: /parties/{Type}/{ID}
    pattern: "^parties/MSISDN/[^\/]+(/error)?$"
    method: PUT
    <<: *mowali-dfsp1-meta
    test_request_scripts:
      - <<: *test-fspiop-headers
      - <<: *put-parties-test-party
    request:
      method: PUT
      uri: parties/MSISDN/{{ env.DFSP2_PARTY_MSISDN }}
      <<: *fwded-msg
    <<: *response-200-status

  ## 5 POST/Quotes: MMO1 -> Mojaloop ##
  - path: /quotes
    pattern: 'quotes$'
    method: POST
    <<: *dfsp1-mowali-meta
    test_request_scripts:
      - <<: *test-auth-header
      - <<: *test-fspiop-headers
      - &post-quotes-test-ids
        name: Mandatory IDs are present
        rules:
          body.quoteId: 'required|regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
          body.transactionId: 'required|regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
      - &post-quotes-test-transfer-type
        name: Transaction Type is a P2P Transfer
        rules:
          body.transactionType.scenario: 'required|in:TRANSFER'
          body.transactionType.initiator: 'required|in:PAYER'
          body.transactionType.initiatorType: 'required|in:CONSUMER'
      - &post-quotes-test-parties
        name: Payer and Payee parties are present and valid in the network
        rules:
          body.payer.partyIdInfo.partyIdType: 'required|in:MSISDN'
          body.payee.partyIdInfo.partyIdType: 'required|in:MSISDN'
          body.payer.partyIdInfo.partyIdentifier: 'required|in:{{env.DFSP1_PARTY_MSISDN}}'
          body.payee.partyIdInfo.partyIdentifier:
            'required|in:{{ env.DFSP2_PARTY_MSISDN }}'
      - &post-quotes-test-amount
        name: Amount is specified correctly
        rules:
          body.amountType: 'required|in:RECEIVE'
          body.amount.amount:
            'required{{env.DFSP2_TRANSFER_AMOUNT ?
            "|in:#{env.DFSP2_TRANSFER_AMOUNT}" : ""}}'
          body.amount.currency: 'required|regex:/^[A-Z]{3}/'
      - &headers-mismatch
        name: fspiop-source does not match payer fspId
        rules:
          headers.fspiop-source.0: 'required'
          body.payer.partyIdInfo.fspId: 'required|different:headers.fspiop-source.0'
    test_response_scripts:
      - name: Response status should be 400
        rules:
          status: 'required|in:400'
      - name: Error must be provided in the callback payload
        rules:
          body.errorInformation.errorCode: 'required|in:3100'
          body.errorInformation.errorDescription: 'required'
    request:
      method: POST
      uri: quotes
      <<: *dfsp1-jws
      headers:
        <<: *header-dfsp1
        <<: *header-post-quotes
        fspiop-uri: /quotes
        fspiop-http-method: POST
      body:
        quoteId: '{{uuidv4()}}'
        transactionId: '{{uuidv4()}}'
        payee: '{{steps.4.request.body.party | json_encode}}'
        payer:
          partyIdInfo:
            partyIdType: 'MSISDN'
            partyIdentifier:
              '{{env.DFSP1_PARTY_MSISDN | default("442079469999")}}'
            fspId: 'FAKEFSP'
          name: 'John Doe'
          personalInfo:
            complexName:
              firstName: 'John'
              middleName: 'Jane'
              lastName: 'Doe'
            dateOfBirth: '2000-01-01'
        amountType: 'RECEIVE'
        amount:
          currency: '{{ env.DFSP2_TRANSFER_CURRENCY | default("GHS") }}'
          amount: '{{ env.DFSP2_TRANSFER_AMOUNT | default("100") }}'
        transactionType:
          scenario: 'TRANSFER'
          initiator: 'PAYER'
          initiatorType: 'CONSUMER'
    response:
      headers:
        date: '{{"now" | date("D, d M Y H:i:s T", "GMT")}}'
        content-type: 'application/json'
      status: 400
      body:
        errorInformation:
          errorCode: '3100'
          errorDescription:
            'Generic error related to the Payer or Payer FSP. Used for
            protecting information that may be considered private.'
