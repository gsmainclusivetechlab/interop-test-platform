name: Indivudual Disbursement - polling - success
slug: indivudual-disbursement-polling-success
use_case: Disbursement
behavior: positive
description: |
  The Service Provider wants to test if he is capable of making a single disbursement from their account with MMO to beneficiary account with MMO. This flow shows the necessary steps for this transaction simulating an approved single disbursement with polling. The Service Provider makes the request and the Mobile Money Provider handles the request and responds with a request state. The Service Provider polls the Mobile Money Provider and the Mobile Money Provider responds with the disbursement details.
precondition: |
  - Mobile Money Operator has GSMA Mobile Money API Implemented.
  - Mobile Money Operator is capable of handled async calls.
  - Required Parameters for Execution:
    - Amount should be the value `52.00`.  
  - Define the environment variables to customise this test case:
    - `X_CLIENT_ID`, default value is `DISORG1STEP12345`
    - `CURRENCY`, default value is "USD`
    - `DEBIT_PARTY_KEY`, default value is `msisdn`
    - `DEBIT_PARTY_VALUE`, default value is `+33555123456`
    - `CREDIT_PARTY_KEY`, default value is `msisdn`
    - `CREDIT_PARTY_VALUE`, default value is `+33555789123`
components:
  - name: Service Provider
    slug: sp
  - name: Mobile Money API Provider
    slug: mmap
test_steps:
  ## 1 ------------------------------POST /transaction: SP -> MMAP ------------------------------##
  - path: /transactions/type/{transactionType}
    pattern: '^transactions/type/disbursement$'
    method: POST
    source: sp
    target: mmap
    api_spec: MM v1.1.3
    trigger:
      amount: '52.00'
    test_request_scripts:
      - name: Header has the X-Client-Id
        rules:
          headers.X-Client-Id: 'required'
      - name: Amount is specified correctly
        rules:
          body.amount: 'regex:/^52([.][0-9]{0,4})?$/'
    test_response_scripts:
      - name: Transaction was successfully Accepted
        rules:
          status: 'required|in:202'
      - name: Status is specified correctly
        rules:
          body.status: 'required|in:pending'
      - name: Notification Method is specified correctly
        rules:
          body.notificationMethod: 'required|in:polling'
    request:
      delay: 3
      method: POST
      uri: /transactions/type/disbursement
      headers:
        Accept: 'application/json'
        Content-Type: 'application/json'
        X-Date: '{{ new_date_iso8601() }}'
        X-Client-Id: '{{ env.X_CLIENT_ID|default("DISORG1STEP12345")}}'
        X-CorrelationID: '{{ uuidv4() }}'
      body:
        amount: '52'
        currency: '{{ env.CURRENCY|default("USD")}}'
        debitParty:
          - key: '{{ env.DEBIT_PARTY_KEY|default("msisdn")}}'
            value: '{{ env.DEBIT_PARTY_VALUE|default("+33555123456")}}'
        creditParty:
          - key: '{{ env.CREDIT_PARTY_KEY|default("msisdn")}}'
            value: '{{ env.CREDIT_PARTY_VALUE|default("+33555789123")}}'
    response:
      status: 202
      headers:
        Content-Type: 'application/json'
        X-Date: '{{ new_date_iso8601() }}'
      body:
        serverCorrelationId: '{{ uuidv4() }}'
        status: 'pending'
        notificationMethod: 'polling'

  ## 2 ------------------------------GET /RequestStates: SP -> MMAP ------------------------------##
  - path: /requeststates/{serverCorrelationId}
    pattern: '^requeststates/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$'
    method: GET
    source: sp
    target: mmap
    api_spec: MM v1.1.3
    trigger:
      serverCorrelationId: '{{ steps.1.response.body.serverCorrelationId }}'
    test_response_scripts:
      - name: Transaction was successfully accepted
        rules:
          status: 'required|in:200'
      - name: Transaction was approved
        rules:
          body.status: 'required|in:completed'
    request:
      method: 'GET'
      uri: '/requeststates/{{ steps.1.response.body.serverCorrelationId }}'
      headers:
        content-type: 'application/json'
        x-date: '{{ new_date_iso8601() }}'
    response:
      status: 200
      headers:
        content-type: 'application/json'
        x-date: '{{ new_date_iso8601() }}'
      body:
        serverCorrelationId: '{{ steps.1.response.body.serverCorrelationId }}'
        status: 'completed'
        objectReference: '{{ uuidv4() }}'
        notificationMethod: 'polling'
    repeat:
      condition:
        body:
          status: 'pending'
      max: 4
      count: 2
      response:
        status: 200
        headers:
          content-type: 'application/json'
          x-date: '{{ new_date_iso8601() }}'
        body:
          serverCorrelationId: '{{ steps.1.response.body.serverCorrelationId }}'
          status: 'pending'
          notificationMethod: 'polling'
      test_response_scripts:
        - name: Request was received and it is pending
          rules:
            body.status: 'required|in:pending'
            status: 'required|in:200'
        - name: serverCorrelationId is the same specidied on step 1
          rules:
            serverCorrelationId:
              '{{ steps.1.response.body.serverCorrelationId }}'
        - name: Notification method is polling
          rules:
            notificationMethod: 'polling'

  ## 3 ------------------------------GET /transaction: SP -> MMAP ------------------------------##
  - path: /transactions/{transactionReference}
    pattern: '^transactions/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$'
    method: GET
    source: sp
    target: mmap
    api_spec: MM v1.1.3
    trigger:
      amount: '52.00'
    test_response_scripts:
      - name: Transaction was successfully accepted
        rules:
          status: 'required|in:200'
      - name: Amount is specified correctly
        rules:
          body.amount: 'regex:/^52([.][0-9]{0,4})?$/'
      - name: Transaction is a Disbursement
        rules:
          body.type: 'required|in:disbursement'
      - name: Transaction was approved
        rules:
          body.transactionStatus: 'required|in:completed'
    request:
      method: 'GET'
      uri: 'transactions/{{ steps.2.response.body.objectReference }}'
      headers:
        Content-Type: 'application/json'
        X-Date: '{{ new_date_iso8601() }}'
    response:
      status: 200
      headers:
        Content-Type: 'application/json'
        X-Date: '{{ new_date_iso8601() }}'
      body:
        '{{ steps.1.request.body|merge({type: "disbursement", transactionStatus:
        "completed", transactionReference:
        steps.2.response.body.objectReference})|json_encode }}'
