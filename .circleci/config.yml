version: 2.1

x_filter_release: &release_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+\.\d+\.\d+/

orbs:
  coverage-reporter: codacy/coverage-reporter@11.9.0
  node: circleci/node@3.0.0

executors:
  standard:
    docker:
      - image: 'cimg/node:12.18.0'

commands:
  publish_tag:
    description: 'Publish the built image under a new tag'
    parameters:
      img_tag:
        type: string
        default: ''
    steps:
      - run:
          name: Re-tag image with << parameters.img_tag >>
          command: |
            TAG=`echo << parameters.img_tag >> | tr '/' '_'`;
            docker tag gsmainclusivetechlab/interop-test-platform gsmainclusivetechlab/interop-test-platform:$TAG;
            docker push gsmainclusivetechlab/interop-test-platform:$TAG;

jobs:
  build:
    executor: standard

    # These variables aren't really used but they need to be present for docker-compose to parse the file
    # TODO: don't use docker-compose for building, but call docker build directly
    environment:
      HOST_WEB_PORT: 80
      HOST_HTTPS_WEB_PORT: 443
      PROJECT_DOMAIN: www.example.com
      HOST_MAILHOG_PORT: 8080
      HOST_PHPMYADMIN_PORT: 8081
      DB_DATABASE: itp-test
      DB_USERNAME: itp-test-user
      DB_PASSWORD: itp-test-pw
    steps:
      - setup_remote_docker:
          # docker_layer_caching: true
          version: 19.03.12
      - run:
          name: Login to Docker Hub
          command:
            echo $DOCKERHUB_ACCESS_TOKEN | docker login -u $DOCKERHUB_USERNAME
            --password-stdin
      - checkout
      - run:
          name: Install gettext for envsubst
          command: sudo apt-get update && sudo apt-get install gettext-base
      - run:
          name: Copy configuration files
          command: 'envsubst < service.example.env > service.env'
      - run:
          name: Build Images
          command: |
            echo "Building Docker Images"
            yarn prepare:docker
            docker-compose -f docker-compose.ci.yml build app
      - run:
          name: Run Tests and get coverage
          command: |
            docker-compose -f docker-compose.ci.yml run app sh -c "/wait && cd /var/www && mv html src && cd src && phpdbg -qrr vendor/bin/phpunit -d memory_limit=512M --coverage-clover=results/clover.xml --log-junit results/results.xml"
            docker cp `docker ps -alq`:/var/www/src/results .
            docker-compose -f docker-compose.ci.yml down -v
      - coverage-reporter/send_report:
          coverage-reports: ./results/clover.xml
          project-token: $CODACY_PROJECT_TOKEN
          tool_version: ''
      - run:
          name: Upload coverage to Codecov
          command: bash <(curl -s https://codecov.io/bash)
      - store_test_results:
          path: ./results
      - store_artifacts:
          path: ./results
      # TODO: fix browser testing and include screenshots
      # - store_artifacts:
      #   path: src/tests/Browser/screenshots
      - when:
          condition: << pipeline.git.branch >>
          steps:
            - publish_tag:
                img_tag: << pipeline.git.branch >>
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - publish_tag:
                img_tag: << pipeline.git.tag >>

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
          context:
            - docker-hub
