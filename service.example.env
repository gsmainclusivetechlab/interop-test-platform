# This file should be copied (and adjusted) into service.env where
# docker-compose will inject it into service containers using env_file.
# For example `envsubst < service.example.env > service.env

APP_DEBUG=${APP_DEBUG}
APP_ENV=${APP_ENV}
APP_KEY=${APP_KEY}
APP_URL=${APP_URL}
TESTING_URL_HTTP=
TESTING_URL_HTTPS=

LOCALE_DEFAULT=en
LOCALE_SUPPORTED=en|

MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"

# Read by PHP services
DB_HOST=mysqldb
DB_DATABASE=${DB_DATABASE}
DB_PASSWORD=${DB_PASSWORD}
DB_USERNAME=${DB_USERNAME}

# Read by mysqldb services
MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
MYSQL_DATABASE=${DB_DATABASE}
MYSQL_PASSWORD=${DB_PASSWORD}
MYSQL_USER=${DB_USERNAME}

MAIL_HOST=${MAIL_HOST}
MAIL_PORT=${MAIL_PORT}
MAIL_USERNAME=${MAIL_USERNAME}
MAIL_PASSWORD=${MAIL_PASSWORD}
MAIL_ENCRYPTION=${MAIL_ENCRYPTION}

# Invitations
# Set to 'true' to make Invitation code mandatory for registration
INVITATION_REQUIRED=true
# Invitation code expire in seconds
INVITATION_LIFETIME=432000

COMPLIANCE_SESSION_EXECUTION=${COMPLIANCE_SESSION_EXECUTION}

SESSION_TEST_AVAILABLE=true
SESSION_TEST_QUESTIONNAIRE_AVAILABLE=true
SESSION_COMPLIANCE_AVAILABLE=true

# How long should a test run wait for the first message to be sent
TESTRUN_INITIAL_TIMEOUT=300
# How long should a test run wait for subsequent messages to be sent
TESTRUN_STEP_TIMEOUT=30
# How often to check if a test run is complete
TESTRUN_TIMEOUT_FREQUENCY=30

# When a test run is in progress, force all incoming messages to match against it (ignoring pattern and triggers)
FORCE_SEQUENTIAL_TESTS=false

# When there are no active test runs and we receive a message which matches a test case, should we create a new test run?
CREATE_TESTRUN_ON_MATCH=true
